{"version":3,"sources":["../../src/functions/relationship_advice.ts"],"sourcesContent":["import { GSContext, GSStatus, PlainObject } from \"@godspeedsystems/core\";\r\nimport axios from \"axios\";\r\nimport { VectorStore } from \"../helper/vectorStore\";\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nimport { relationship_advice_system_prompt } from \"../system_prompts/system_prompts_archive\";\r\n\r\nconst GEMINI_API_KEY = process.env.GOOGLE_API_KEY!;\r\nconst CONVO_DIR = path.resolve(__dirname, \"../../conversations/Relationships\");\r\n\r\nif (!fs.existsSync(CONVO_DIR)) {\r\n  fs.mkdirSync(CONVO_DIR);\r\n}\r\n\r\nfunction getSessionFile(sessionId: string) {\r\n  return path.join(CONVO_DIR, `${sessionId}.json`);\r\n}\r\n\r\nfunction loadMessages(sessionId: string): any[] {\r\n  const file = getSessionFile(sessionId);\r\n  if (fs.existsSync(file)) {\r\n    const raw = fs.readFileSync(file, \"utf-8\");\r\n    return JSON.parse(raw);\r\n  }\r\n  return [];\r\n}\r\n\r\nfunction saveMessages(sessionId: string, messages: any[]) {\r\n  const file = getSessionFile(sessionId);\r\n  fs.writeFileSync(file, JSON.stringify(messages, null, 2));\r\n}\r\n\r\nfunction formatGeminiMessages(messages: { role: string; content: string }[]) {\r\n  return {\r\n    contents: [\r\n      {\r\n        parts: messages.map(m => ({\r\n          text: `${m.role === \"user\" ? \"User\" : \"Assistant\"}: ${m.content}`\r\n        }))\r\n      }\r\n    ]\r\n  };\r\n}\r\n\r\nexport default async function (ctx: GSContext, args: PlainObject): Promise<GSStatus> {\r\n    const sessionId = ctx.inputs?.data?.body?.session_id || '';\r\n    const user_enegram_type = ctx.inputs?.data?.body?.user_enegram_type || '';\r\n    const partner_enegram_type = ctx.inputs?.data?.body?.partner_enegram_type || '';\r\n    const relationship_type = ctx.inputs?.data?.body?.relationship_type || '';\r\n    const add_relationship_comment = ctx.inputs?.data?.body?.add_relationship_comment || '';\r\n\r\n    const user_query = ctx.inputs?.data?.body?.user_query || '';\r\n\r\n    const messages = loadMessages(sessionId);\r\n\r\n    if(user_query.length === 0){\r\n\r\n        const vs = new VectorStore()\r\n\r\n        const context_query = `Eneagram Types: ${user_enegram_type},${partner_enegram_type}`\r\n\r\n        const docs = await vs.search(context_query)\r\n        const unique_docs = Array.from(new Set(docs.map((doc) => `${doc.content}`)));\r\n        const eneagram_context = unique_docs.join('\\n');\r\n\r\n        const userInput = `Here are the details given by user about his eneagram type and other person's eneagram types.\r\n       He/She has also given their relationship type and additional insights in their dynamics.\r\n     - User's Eneagram Type:${user_enegram_type}\r\n     - Other Person's Eneagram Type:${partner_enegram_type}\r\n     - Relationship Type:${relationship_type}\r\n     - Additional Insightes in Their Dynamics:${add_relationship_comment}`\r\n\r\n\r\n        messages.push({ role: \"user\", content: userInput });\r\n        messages.push({role:\"tool\",content:eneagram_context})\r\n        saveMessages(sessionId, messages);\r\n\r\n        return new GSStatus(true, 200, undefined, {message:\" Users info has been secured correctly.\"});\r\n    } else {\r\n\r\n      messages.push({ role: \"user\", content: user_query });\r\n      try {\r\n           const llmResp = await axios.post(\r\n               \"https://openrouter.ai/api/v1/chat/completions\",\r\n            {\r\n               model: process.env.MODEL_NAME!,\r\n               messages: [\r\n            {\r\n                 role: \"system\",\r\n                 content: relationship_advice_system_prompt\r\n            },\r\n            ...messages\r\n           ]\r\n           },\r\n           {\r\n            headers: {\r\n                \"Authorization\": `Bearer ${process.env.OPENROUTER_API_KEY}`,\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n            }\r\n          );\r\n\r\n      const llmMessage = llmResp.data.choices[0].message.content.trim();\r\n      messages.push({ role: \"assistant\", content: llmMessage });\r\n\r\n      const isRetrieval = llmMessage.includes(\"RETRIEVE\");\r\n      var responseMessage: string;\r\n\r\n      if (isRetrieval) {\r\n          const query = llmMessage.split(\"RETRIEVE\")[1]?.trim() || \"\";\r\n    \r\n          const vs = new VectorStore()\r\n          // Vector search using the constructed query\r\n          const docs = await vs.search(query);\r\n          const unique_docs = Array.from(new Set(docs.map((doc) => `${doc.content}`)));\r\n          const context = unique_docs.join('\\n');\r\n\r\n          messages.push({ role: \"tool\", content: context});\r\n\r\n          // Ask LLM to issue the final verdict using context\r\n          const verdictResp = await axios.post(\r\n                \"https://openrouter.ai/api/v1/chat/completions\",\r\n              {\r\n                 model: process.env.MODEL_NAME!,\r\n                 messages: [\r\n                      {\r\n                          role: \"system\",\r\n                          content: relationship_advice_system_prompt\r\n                       },\r\n                       ...messages\r\n                    ]\r\n              },\r\n              {\r\n                 headers: {\r\n                           \"Authorization\": `Bearer ${process.env.OPENROUTER_API_KEY}`,\r\n                           \"Content-Type\": \"application/json\"\r\n                }\r\n              }\r\n            );\r\n\r\n           responseMessage = verdictResp.data.choices[0].message.content.trim();\r\n           messages.push({ role: \"assistant\", content: responseMessage });\r\n        } else {\r\n           responseMessage = llmMessage;\r\n        }\r\n    } catch {\r\n\r\n        const prompt = formatGeminiMessages([\r\n        {\r\n           role: \"system\",\r\n           content: relationship_advice_system_prompt\r\n        },\r\n        ...messages\r\n        ]);\r\n\r\n        const geminiResp = await axios.post(\r\n           `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-04-17:generateContent?key=${GEMINI_API_KEY}`,\r\n           prompt,\r\n           {\r\n              headers: {\r\n                \"Content-Type\": \"application/json\"\r\n              }\r\n            }\r\n        );\r\n\r\n        const geminireply = geminiResp.data.candidates[0].content.parts[0].text.trim();\r\n        messages.push({ role: \"assistant\", content: geminireply });\r\n\r\n        const isRetrieval = geminireply.includes(\"RETRIEVE\");\r\n        var responseMessage: string;\r\n\r\n         if (isRetrieval) {\r\n           const query = geminireply.split(\"RETRIEVE\")[1]?.trim() || \"\";\r\n    \r\n           const vs = new VectorStore()\r\n           // Vector search using the constructed query\r\n           const docs = await vs.search(query);\r\n           const unique_docs = Array.from(new Set(docs.map((doc) => `${doc.content}`)));\r\n           const context = unique_docs.join('\\n');\r\n           messages.push({ role: \"tool\", content: context});\r\n\r\n           const verdictprompt = formatGeminiMessages([\r\n             {\r\n                   role: \"system\",\r\n                   content: relationship_advice_system_prompt\r\n             },\r\n             ...messages\r\n            ]);\r\n\r\n           const verdictResp = await axios.post(\r\n              `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-04-17:generateContent?key=${GEMINI_API_KEY}`,\r\n               verdictprompt,\r\n               {\r\n                headers: {\r\n                \"Content-Type\": \"application/json\"\r\n               }\r\n             }\r\n            );\r\n\r\n           responseMessage = verdictResp.data.candidates[0].content.parts[0].text.trim();\r\n           messages.push({ role: \"assistant\", content: responseMessage });\r\n        } else {\r\n           // LLM is not ready yet â€” ask another question\r\n           responseMessage = geminireply;\r\n     }\r\n    }\r\n\r\n    saveMessages(sessionId, messages);\r\n    return new GSStatus(true, 200, undefined, {message : responseMessage});\r\n  }\r\n}"],"names":["GEMINI_API_KEY","process","env","GOOGLE_API_KEY","CONVO_DIR","path","resolve","__dirname","fs","existsSync","mkdirSync","getSessionFile","sessionId","join","loadMessages","file","raw","readFileSync","JSON","parse","saveMessages","messages","writeFileSync","stringify","formatGeminiMessages","contents","parts","map","m","text","role","content","ctx","args","inputs","data","body","session_id","user_enegram_type","partner_enegram_type","relationship_type","add_relationship_comment","user_query","length","vs","VectorStore","context_query","docs","search","unique_docs","Array","from","Set","doc","eneagram_context","userInput","push","GSStatus","undefined","message","llmResp","axios","post","model","MODEL_NAME","relationship_advice_system_prompt","headers","OPENROUTER_API_KEY","llmMessage","choices","trim","isRetrieval","includes","responseMessage","query","split","context","verdictResp","prompt","geminiResp","geminireply","candidates","verdictprompt"],"mappings":";;;;+BA4CA;;;eAAA;;;sBA5CiD;8DAC/B;6BACU;2DACb;6DACE;wCACiC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAElD,MAAMA,iBAAiBC,QAAQC,GAAG,CAACC,cAAc;AACjD,MAAMC,YAAYC,aAAI,CAACC,OAAO,CAACC,WAAW;AAE1C,IAAI,CAACC,WAAE,CAACC,UAAU,CAACL,YAAY;IAC7BI,WAAE,CAACE,SAAS,CAACN;AACf;AAEA,SAASO,eAAeC,SAAiB;IACvC,OAAOP,aAAI,CAACQ,IAAI,CAACT,WAAW,GAAGQ,UAAU,KAAK,CAAC;AACjD;AAEA,SAASE,aAAaF,SAAiB;IACrC,MAAMG,OAAOJ,eAAeC;IAC5B,IAAIJ,WAAE,CAACC,UAAU,CAACM,OAAO;QACvB,MAAMC,MAAMR,WAAE,CAACS,YAAY,CAACF,MAAM;QAClC,OAAOG,KAAKC,KAAK,CAACH;IACpB;IACA,OAAO,EAAE;AACX;AAEA,SAASI,aAAaR,SAAiB,EAAES,QAAe;IACtD,MAAMN,OAAOJ,eAAeC;IAC5BJ,WAAE,CAACc,aAAa,CAACP,MAAMG,KAAKK,SAAS,CAACF,UAAU,MAAM;AACxD;AAEA,SAASG,qBAAqBH,QAA6C;IACzE,OAAO;QACLI,UAAU;YACR;gBACEC,OAAOL,SAASM,GAAG,CAACC,CAAAA,IAAM,CAAA;wBACxBC,MAAM,GAAGD,EAAEE,IAAI,KAAK,SAAS,SAAS,YAAY,EAAE,EAAEF,EAAEG,OAAO,EAAE;oBACnE,CAAA;YACF;SACD;IACH;AACF;AAEe,SAAf,SAA+BC,GAAc,EAAEC,IAAiB;;YAC1CD,uBAAAA,kBAAAA,aACQA,wBAAAA,mBAAAA,cACGA,wBAAAA,mBAAAA,cACHA,wBAAAA,mBAAAA,cACOA,wBAAAA,mBAAAA,cAEdA,wBAAAA,mBAAAA;QANnB,MAAMpB,YAAYoB,EAAAA,cAAAA,IAAIE,MAAM,cAAVF,mCAAAA,mBAAAA,YAAYG,IAAI,cAAhBH,wCAAAA,wBAAAA,iBAAkBI,IAAI,cAAtBJ,4CAAAA,sBAAwBK,UAAU,KAAI;QACxD,MAAMC,oBAAoBN,EAAAA,eAAAA,IAAIE,MAAM,cAAVF,oCAAAA,oBAAAA,aAAYG,IAAI,cAAhBH,yCAAAA,yBAAAA,kBAAkBI,IAAI,cAAtBJ,6CAAAA,uBAAwBM,iBAAiB,KAAI;QACvE,MAAMC,uBAAuBP,EAAAA,eAAAA,IAAIE,MAAM,cAAVF,oCAAAA,oBAAAA,aAAYG,IAAI,cAAhBH,yCAAAA,yBAAAA,kBAAkBI,IAAI,cAAtBJ,6CAAAA,uBAAwBO,oBAAoB,KAAI;QAC7E,MAAMC,oBAAoBR,EAAAA,eAAAA,IAAIE,MAAM,cAAVF,oCAAAA,oBAAAA,aAAYG,IAAI,cAAhBH,yCAAAA,yBAAAA,kBAAkBI,IAAI,cAAtBJ,6CAAAA,uBAAwBQ,iBAAiB,KAAI;QACvE,MAAMC,2BAA2BT,EAAAA,eAAAA,IAAIE,MAAM,cAAVF,oCAAAA,oBAAAA,aAAYG,IAAI,cAAhBH,yCAAAA,yBAAAA,kBAAkBI,IAAI,cAAtBJ,6CAAAA,uBAAwBS,wBAAwB,KAAI;QAErF,MAAMC,aAAaV,EAAAA,eAAAA,IAAIE,MAAM,cAAVF,oCAAAA,oBAAAA,aAAYG,IAAI,cAAhBH,yCAAAA,yBAAAA,kBAAkBI,IAAI,cAAtBJ,6CAAAA,uBAAwBU,UAAU,KAAI;QAEzD,MAAMrB,WAAWP,aAAaF;QAE9B,IAAG8B,WAAWC,MAAM,KAAK,GAAE;YAEvB,MAAMC,KAAK,IAAIC,wBAAW;YAE1B,MAAMC,gBAAgB,CAAC,gBAAgB,EAAER,kBAAkB,CAAC,EAAEC,sBAAsB;YAEpF,MAAMQ,OAAO,MAAMH,GAAGI,MAAM,CAACF;YAC7B,MAAMG,cAAcC,MAAMC,IAAI,CAAC,IAAIC,IAAIL,KAAKpB,GAAG,CAAC,CAAC0B,MAAQ,GAAGA,IAAItB,OAAO,EAAE;YACzE,MAAMuB,mBAAmBL,YAAYpC,IAAI,CAAC;YAE1C,MAAM0C,YAAY,CAAC;;4BAEC,EAAEjB,kBAAkB;oCACZ,EAAEC,qBAAqB;yBAClC,EAAEC,kBAAkB;8CACC,EAAEC,0BAA0B;YAGlEpB,SAASmC,IAAI,CAAC;gBAAE1B,MAAM;gBAAQC,SAASwB;YAAU;YACjDlC,SAASmC,IAAI,CAAC;gBAAC1B,MAAK;gBAAOC,SAAQuB;YAAgB;YACnDlC,aAAaR,WAAWS;YAExB,OAAO,IAAIoC,cAAQ,CAAC,MAAM,KAAKC,WAAW;gBAACC,SAAQ;YAAyC;QAChG,OAAO;YAELtC,SAASmC,IAAI,CAAC;gBAAE1B,MAAM;gBAAQC,SAASW;YAAW;YAClD,IAAI;gBACC,MAAMkB,UAAU,MAAMC,cAAK,CAACC,IAAI,CAC5B,iDACH;oBACGC,OAAO9D,QAAQC,GAAG,CAAC8D,UAAU;oBAC7B3C,UAAU;wBACb;4BACKS,MAAM;4BACNC,SAASkC,yDAAiC;wBAC/C;2BACG5C;qBACH;gBACD,GACA;oBACC6C,SAAS;wBACL,iBAAiB,CAAC,OAAO,EAAEjE,QAAQC,GAAG,CAACiE,kBAAkB,EAAE;wBAC3D,gBAAgB;oBACpB;gBACA;gBAGN,MAAMC,aAAaR,QAAQzB,IAAI,CAACkC,OAAO,CAAC,EAAE,CAACV,OAAO,CAAC5B,OAAO,CAACuC,IAAI;gBAC/DjD,SAASmC,IAAI,CAAC;oBAAE1B,MAAM;oBAAaC,SAASqC;gBAAW;gBAEvD,MAAMG,cAAcH,WAAWI,QAAQ,CAAC;gBACxC,IAAIC;gBAEJ,IAAIF,aAAa;wBACCH;oBAAd,MAAMM,QAAQN,EAAAA,qBAAAA,WAAWO,KAAK,CAAC,WAAW,CAAC,EAAE,cAA/BP,yCAAAA,mBAAiCE,IAAI,OAAM;oBAEzD,MAAM1B,KAAK,IAAIC,wBAAW;oBAC1B,4CAA4C;oBAC5C,MAAME,OAAO,MAAMH,GAAGI,MAAM,CAAC0B;oBAC7B,MAAMzB,cAAcC,MAAMC,IAAI,CAAC,IAAIC,IAAIL,KAAKpB,GAAG,CAAC,CAAC0B,MAAQ,GAAGA,IAAItB,OAAO,EAAE;oBACzE,MAAM6C,UAAU3B,YAAYpC,IAAI,CAAC;oBAEjCQ,SAASmC,IAAI,CAAC;wBAAE1B,MAAM;wBAAQC,SAAS6C;oBAAO;oBAE9C,mDAAmD;oBACnD,MAAMC,cAAc,MAAMhB,cAAK,CAACC,IAAI,CAC9B,iDACF;wBACGC,OAAO9D,QAAQC,GAAG,CAAC8D,UAAU;wBAC7B3C,UAAU;4BACL;gCACIS,MAAM;gCACNC,SAASkC,yDAAiC;4BAC7C;+BACG5C;yBACL;oBACP,GACA;wBACG6C,SAAS;4BACC,iBAAiB,CAAC,OAAO,EAAEjE,QAAQC,GAAG,CAACiE,kBAAkB,EAAE;4BAC3D,gBAAgB;wBAC3B;oBACF;oBAGHM,kBAAkBI,YAAY1C,IAAI,CAACkC,OAAO,CAAC,EAAE,CAACV,OAAO,CAAC5B,OAAO,CAACuC,IAAI;oBAClEjD,SAASmC,IAAI,CAAC;wBAAE1B,MAAM;wBAAaC,SAAS0C;oBAAgB;gBAC/D,OAAO;oBACJA,kBAAkBL;gBACrB;YACJ,EAAE,UAAM;gBAEJ,MAAMU,SAAStD,qBAAqB;oBACpC;wBACGM,MAAM;wBACNC,SAASkC,yDAAiC;oBAC7C;uBACG5C;iBACF;gBAED,MAAM0D,aAAa,MAAMlB,cAAK,CAACC,IAAI,CAChC,CAAC,2GAA2G,EAAE9D,gBAAgB,EAC9H8E,QACA;oBACGZ,SAAS;wBACP,gBAAgB;oBAClB;gBACF;gBAGJ,MAAMc,cAAcD,WAAW5C,IAAI,CAAC8C,UAAU,CAAC,EAAE,CAAClD,OAAO,CAACL,KAAK,CAAC,EAAE,CAACG,IAAI,CAACyC,IAAI;gBAC5EjD,SAASmC,IAAI,CAAC;oBAAE1B,MAAM;oBAAaC,SAASiD;gBAAY;gBAExD,MAAMT,cAAcS,YAAYR,QAAQ,CAAC;gBACzC,IAAIC;gBAEH,IAAIF,aAAa;wBACDS;oBAAd,MAAMN,QAAQM,EAAAA,sBAAAA,YAAYL,KAAK,CAAC,WAAW,CAAC,EAAE,cAAhCK,0CAAAA,oBAAkCV,IAAI,OAAM;oBAE1D,MAAM1B,KAAK,IAAIC,wBAAW;oBAC1B,4CAA4C;oBAC5C,MAAME,OAAO,MAAMH,GAAGI,MAAM,CAAC0B;oBAC7B,MAAMzB,cAAcC,MAAMC,IAAI,CAAC,IAAIC,IAAIL,KAAKpB,GAAG,CAAC,CAAC0B,MAAQ,GAAGA,IAAItB,OAAO,EAAE;oBACzE,MAAM6C,UAAU3B,YAAYpC,IAAI,CAAC;oBACjCQ,SAASmC,IAAI,CAAC;wBAAE1B,MAAM;wBAAQC,SAAS6C;oBAAO;oBAE9C,MAAMM,gBAAgB1D,qBAAqB;wBACzC;4BACMM,MAAM;4BACNC,SAASkC,yDAAiC;wBAChD;2BACG5C;qBACH;oBAEF,MAAMwD,cAAc,MAAMhB,cAAK,CAACC,IAAI,CACjC,CAAC,2GAA2G,EAAE9D,gBAAgB,EAC7HkF,eACA;wBACChB,SAAS;4BACT,gBAAgB;wBACjB;oBACF;oBAGFO,kBAAkBI,YAAY1C,IAAI,CAAC8C,UAAU,CAAC,EAAE,CAAClD,OAAO,CAACL,KAAK,CAAC,EAAE,CAACG,IAAI,CAACyC,IAAI;oBAC3EjD,SAASmC,IAAI,CAAC;wBAAE1B,MAAM;wBAAaC,SAAS0C;oBAAgB;gBAC/D,OAAO;oBACJ,8CAA8C;oBAC9CA,kBAAkBO;gBACxB;YACD;YAEA5D,aAAaR,WAAWS;YACxB,OAAO,IAAIoC,cAAQ,CAAC,MAAM,KAAKC,WAAW;gBAACC,SAAUc;YAAe;QACtE;IACF"}