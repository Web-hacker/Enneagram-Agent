{"version":3,"sources":["../../src/functions/know_yourself.ts"],"sourcesContent":["import { GSContext, GSStatus, PlainObject } from \"@godspeedsystems/core\";\r\nimport axios from \"axios\";\r\nimport { VectorStore } from \"../helper/vectorStore\";\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nimport { personality_questions_prompt,final_personality_verdict_prompt } from \"../system_prompts/system_prompts_archive\";\r\n\r\n\r\nconst GEMINI_API_KEY = process.env.GOOGLE_API_KEY!;\r\nconst CONVO_DIR = path.resolve(__dirname, \"../../conversations/Personality\");\r\n\r\nif (!fs.existsSync(CONVO_DIR)) {\r\n  fs.mkdirSync(CONVO_DIR);\r\n}\r\n\r\nfunction getSessionFile(sessionId: string) {\r\n  return path.join(CONVO_DIR, `${sessionId}.json`);\r\n}\r\n\r\nfunction loadMessages(sessionId: string): any[] {\r\n  const file = getSessionFile(sessionId);\r\n  if (fs.existsSync(file)) {\r\n    const raw = fs.readFileSync(file, \"utf-8\");\r\n    return JSON.parse(raw);\r\n  }\r\n  return [];\r\n}\r\n\r\nfunction saveMessages(sessionId: string, messages: any[]) {\r\n  const file = getSessionFile(sessionId);\r\n  fs.writeFileSync(file, JSON.stringify(messages, null, 2));\r\n}\r\n\r\nfunction formatGeminiMessages(messages: { role: string; content: string }[]) {\r\n  return {\r\n    contents: [\r\n      {\r\n        parts: messages.map(m => ({\r\n          text: `${m.role === \"user\" ? \"User\" : \"Assistant\"}: ${m.content}`\r\n        }))\r\n      }\r\n    ]\r\n  };\r\n}\r\n\r\nexport default async function (ctx: GSContext, args: PlainObject): Promise<GSStatus> {\r\n  const { sessionId, userInput } = ctx.inputs.data.body;\r\n\r\n  const messages = loadMessages(sessionId);\r\n\r\n  messages.push({ role: \"user\", content: userInput });\r\n\r\n  try{\r\n   const llmResp = await axios.post(\r\n    \"https://openrouter.ai/api/v1/chat/completions\",\r\n    {\r\n      model: process.env.MODEL_NAME!,\r\n      messages: [\r\n        {\r\n          role: \"system\",\r\n          content: personality_questions_prompt\r\n        },\r\n        ...messages\r\n      ]\r\n    },\r\n    {\r\n      headers: {\r\n        \"Authorization\": `Bearer ${process.env.OPENROUTER_API_KEY}`,\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    }\r\n  );\r\n\r\n  const llmMessage = llmResp.data.choices[0].message.content.trim();\r\n  messages.push({ role: \"assistant\", content: llmMessage });\r\n\r\n  const isRetrieval = llmMessage.includes(\"RETRIEVE\");\r\n  var responseMessage: string;\r\n\r\n  if (isRetrieval) {\r\n    const query = llmMessage.split(\"RETRIEVE\")[1]?.trim() || \"\";\r\n    \r\n    const vs = new VectorStore()\r\n    // Vector search using the constructed query\r\n    const docs = await vs.search(query);\r\n    const unique_docs = Array.from(new Set(docs.map((doc) => `${doc.content}`)));\r\n    const context = unique_docs.join('\\n');\r\n\r\n    // Ask LLM to issue the final verdict using context\r\n    const verdictResp = await axios.post(\r\n      \"https://openrouter.ai/api/v1/chat/completions\",\r\n      {\r\n        model: process.env.MODEL_NAME!,\r\n        messages: [\r\n          {\r\n            role: \"system\",\r\n            content: `${final_personality_verdict_prompt}\\n\\nBOOK:\\n${context}`\r\n          },\r\n          ...messages\r\n        ]\r\n      },\r\n      {\r\n        headers: {\r\n          \"Authorization\": `Bearer ${process.env.OPENROUTER_API_KEY}`,\r\n          \"Content-Type\": \"application/json\"\r\n        }\r\n      }\r\n    );\r\n\r\n    responseMessage = verdictResp.data.choices[0].message.content.trim();\r\n    messages.push({ role: \"assistant\", content: responseMessage });\r\n  } else {\r\n    // LLM is not ready yet — ask another question\r\n    responseMessage = llmMessage;\r\n  }\r\n}\r\ncatch {\r\n\r\n    const prompt = formatGeminiMessages([\r\n    {\r\n      role: \"system\",\r\n      content: personality_questions_prompt\r\n    },\r\n    ...messages\r\n  ]);\r\n\r\n   const geminiResp = await axios.post(\r\n      `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-04-17:generateContent?key=${GEMINI_API_KEY}`,\r\n      prompt,\r\n      {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        }\r\n      }\r\n    );\r\n\r\n    const geminireply = geminiResp.data.candidates[0].content.parts[0].text.trim();\r\n    messages.push({ role: \"assistant\", content: geminireply });\r\n\r\n    const isRetrieval = geminireply.includes(\"RETRIEVE\");\r\n    var responseMessage: string;\r\n\r\n  if (isRetrieval) {\r\n    const query = geminireply.split(\"RETRIEVE\")[1]?.trim() || \"\";\r\n    \r\n    const vs = new VectorStore()\r\n    // Vector search using the constructed query\r\n    const docs = await vs.search(query);\r\n    const unique_docs = Array.from(new Set(docs.map((doc) => `${doc.content}`)));\r\n    const context = unique_docs.join('\\n');\r\n\r\n    const verdictprompt = formatGeminiMessages([\r\n    {\r\n      role: \"system\",\r\n      content: `${final_personality_verdict_prompt}\\n\\nBOOK:\\n${context}`\r\n    },\r\n    ...messages\r\n  ]);\r\n\r\n    const verdictResp = await axios.post(\r\n      `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-04-17:generateContent?key=${GEMINI_API_KEY}`,\r\n      verdictprompt,\r\n      {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        }\r\n      }\r\n    );\r\n\r\n    responseMessage = verdictResp.data.candidates[0].content.parts[0].text.trim();\r\n    messages.push({ role: \"assistant\", content: responseMessage });\r\n  } else {\r\n    // LLM is not ready yet — ask another question\r\n    responseMessage = geminireply;\r\n  }\r\n\r\n  }\r\n\r\n  // Update memory into ctx.outputs using GSStatus\r\n  saveMessages(sessionId, messages);\r\n\r\n  // Return final message (question or verdict)\r\n  return new GSStatus(true, 200, undefined, {message : responseMessage});\r\n}\r\n"],"names":["GEMINI_API_KEY","process","env","GOOGLE_API_KEY","CONVO_DIR","path","resolve","__dirname","fs","existsSync","mkdirSync","getSessionFile","sessionId","join","loadMessages","file","raw","readFileSync","JSON","parse","saveMessages","messages","writeFileSync","stringify","formatGeminiMessages","contents","parts","map","m","text","role","content","ctx","args","userInput","inputs","data","body","push","llmResp","axios","post","model","MODEL_NAME","personality_questions_prompt","headers","OPENROUTER_API_KEY","llmMessage","choices","message","trim","isRetrieval","includes","responseMessage","query","split","vs","VectorStore","docs","search","unique_docs","Array","from","Set","doc","context","verdictResp","final_personality_verdict_prompt","prompt","geminiResp","geminireply","candidates","verdictprompt","GSStatus","undefined"],"mappings":"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"}