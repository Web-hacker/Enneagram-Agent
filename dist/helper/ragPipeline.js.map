{"version":3,"sources":["../../src/helper/ragPipeline.ts"],"sourcesContent":["import { VectorStore } from './vectorStore';\r\nimport OpenAI from 'openai';\r\nimport axios from \"axios\";\r\n\r\nexport class CompleteRAGPipeline {\r\n    private vs: VectorStore;\r\n    constructor() {\r\n        console.log('Initializing OpenRouterAI model...');\r\n        console.log(`Initialized ${process.env.MODEL_NAME} model.`);\r\n        console.log('Loading vector store...');\r\n        this.vs = new VectorStore();\r\n        // this.vs.loadOrInitializeIndex();\r\n        console.log('Vector store loaded...');\r\n    }\r\n\r\n    async formatGeminiMessages(messages: { role: string; content: string }[]) {\r\n  return {\r\n    contents: [\r\n      {\r\n        parts: messages.map(m => ({\r\n          text: `${m.role === \"user\" ? \"User\" : \"Assistant\"}: ${m.content}`\r\n        }))\r\n      }\r\n    ]\r\n  };\r\n}\r\n    async run(query: string, k: number = 5): Promise<{ answer: string; source_files: string[] }> {\r\n        console.log('Querying docs...');\r\n        const docs = await this.vs.search(query, k);\r\n        console.log('Creating context...');\r\n        const unique_docs = Array.from(new Set(docs.map((doc) => `${doc.content}`)));\r\n        const context = unique_docs.join('\\n');\r\n        console.log('Creating messages...');\r\n        const sourceFiles = Array.from(new Set(docs.map((doc) => doc.docId)));\r\n        // const sourceFiles = unique_sourceFiles\r\n        console.log(sourceFiles);\r\n\r\n        console.log('Asking LLM...');\r\n        const apiKey = process.env.OPENROUTER_API_KEY!;\r\n        const GEMINI_API_KEY = process.env.GOOGLE_API_KEY!;\r\n        if(!apiKey) console.log(\"API_KEY is not loaded\")\r\n        console.log(apiKey)\r\n        console.log(\"Initialise Openrouter model...\")\r\n        try{\r\n        // var response = await openai.chat.completions.create({\r\n        var response = await axios.post(\r\n          \"https://openrouter.ai/api/v1/chat/completions\",\r\n          {\r\n                                       model: process.env.MODEL_NAME!, \r\n                                       messages: [\r\n                                                     {\r\n                                                      role: 'system',\r\n                                                      content: `You are an AI assistant whose Purpose is to: \r\n1.elevate and deepen understanding   \r\n2.minimise potential conflicts       \r\n3.Navigate long term pattern dynamics for resolution     \r\n\r\nusing the given context and query.  \r\n\r\nFirst thing to do is to identify the two enneagram types:  \r\nType A:Find out the type of the person in question.            \r\nType B:Relationship dynamics for every combination of each enneagram type \r\n\r\nThe context is given from a book called Enneagram cards. The book is called Enneagram Cards because these reveal the survival wiring of each type which runs in each of us and creates the lens we view the world. Revealing this to the User is your goal.\r\n\r\nAdd the information regarding the movements of planters could be a good idea  \r\nSo you are directed to move through the darker elements and bring them into the awareness.   \r\nIn short you can access the enneagram types and reveal the relationship dynamics. So with all the esoteric nature of the satchitaband, sacred geometry, the power of the enneagram and its sacred algorithm will elevate relationships to anyone who uses it with sincerity and the ability to self reflect.  \r\n\r\nYou have 3 areas to explore:  \r\n\r\n1.Work   \r\n2.Family  \r\n3.Lover relationships  \r\n\r\nNow answer user query based on the given context`.trim()\r\n      },\r\n      {\r\n        role: 'user',\r\n        content: `Context:\\n${context}\\n\\nQuestion: ${query}\\nAnswer:`\r\n      }\r\n    ]\r\n},\r\n{\r\n    headers: {\r\n      \"Authorization\": `Bearer ${process.env.OPENROUTER_API_KEY}`,\r\n      \"Content-Type\": \"application/json\",\r\n      // Add this if your key is restricted by domain\r\n      // \"HTTP-Referer\": \"http://localhost:3000\"\r\n    }\r\n  }\r\n)\r\n    \r\n    console.log(\"Got response...\")\r\n    var answer = response.data.choices?.[0]?.message?.content?.trim() || 'No response.';\r\n} catch {\r\n\r\n    const prompt = await this.formatGeminiMessages([\r\n    {\r\n      role: \"system\",\r\n      content: `You are an AI assistant whose Purpose is to: \r\n1.elevate and deepen understanding   \r\n2.minimise potential conflicts       \r\n3.Navigate long term pattern dynamics for resolution     \r\n\r\nusing the given context and query.  \r\n\r\nFirst thing to do is to identify the two enneagram types:  \r\nType A:Find out the type of the person in question.            \r\nType B:Relationship dynamics for every combination of each enneagram type \r\n\r\nThe context is given from a book called Enneagram cards. The book is called Enneagram Cards because these reveal the survival wiring of each type which runs in each of us and creates the lens we view the world. Revealing this to the User is your goal.\r\n\r\nAdd the information regarding the movements of planters could be a good idea  \r\nSo you are directed to move through the darker elements and bring them into the awareness.   \r\nIn short you can access the enneagram types and reveal the relationship dynamics. So with all the esoteric nature of the satchitaband, sacred geometry, the power of the enneagram and its sacred algorithm will elevate relationships to anyone who uses it with sincerity and the ability to self reflect.  \r\n\r\nYou have 3 areas to explore:  \r\n\r\n1.Work   \r\n2.Family  \r\n3.Lover relationships  \r\n\r\nNow answer user query based on the given context`.trim()\r\n    }\r\n  ]);\r\n\r\n     \r\n    var geminiResp = await axios.post(\r\n      `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-04-17:generateContent?key=${GEMINI_API_KEY}`,\r\n      prompt,\r\n      {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        }\r\n      }\r\n    );\r\n\r\n    console.log(\"Got response...\")\r\n    var answer = geminiResp.data.candidates[0].content.parts[0].text.trim();\r\n  \r\n}\r\n        \r\n        return {\r\n            answer: answer,\r\n            source_files: sourceFiles\r\n        }\r\n    }\r\n}\r\n"],"names":["CompleteRAGPipeline","formatGeminiMessages","messages","contents","parts","map","m","text","role","content","run","query","k","console","log","docs","vs","search","unique_docs","Array","from","Set","doc","context","join","sourceFiles","docId","apiKey","process","env","OPENROUTER_API_KEY","GEMINI_API_KEY","GOOGLE_API_KEY","response","axios","post","model","MODEL_NAME","trim","headers","answer","data","choices","message","prompt","geminiResp","candidates","source_files","VectorStore"],"mappings":"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"}